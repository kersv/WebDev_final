{"ast":null,"code":"var _jsxFileName = \"/Users/kersv/dev/client-starter-code/src/components/containers/CampusContainer.js\";\n\n/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  } // Render a Campus view by passing campus data as props to the corresponding View component\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        campus: this.props.campus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\n\n\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id))\n  };\n}; // Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"sources":["/Users/kersv/dev/client-starter-code/src/components/containers/CampusContainer.js"],"names":["Header","React","Component","connect","fetchCampusThunk","CampusView","CampusContainer","componentDidMount","props","fetchCampus","match","params","id","render","campus","mapState","state","mapDispatch","dispatch"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,SAASC,UAAT,QAA2B,UAA3B;;;AAEA,MAAMC,eAAN,SAA8BJ,SAA9B,CAAwC;AACtC;AACAK,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKC,KAAL,CAAWC,WAAX,CAAuB,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACD,GALqC,CAOtC;;;AACAC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,UAAD;AAAY,QAAA,MAAM,EAAE,KAAKL,KAAL,CAAWM;AAA/B;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAfqC,C,CAkBxC;AACA;AACA;;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,SAAO;AACLF,IAAAA,MAAM,EAAEE,KAAK,CAACF,MADT,CACkB;;AADlB,GAAP;AAGD,CAJD,C,CAKA;AACA;;;AACA,MAAMG,WAAW,GAAIC,QAAD,IAAc;AAChC,SAAO;AACLT,IAAAA,WAAW,EAAGG,EAAD,IAAQM,QAAQ,CAACd,gBAAgB,CAACQ,EAAD,CAAjB;AADxB,GAAP;AAGD,CAJD,C,CAMA;AACA;AACA;;;AACA,eAAeT,OAAO,CAACY,QAAD,EAAWE,WAAX,CAAP,CAA+BX,eAA/B,CAAf","sourcesContent":["/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk } from \"../../store/thunks\";\n\nimport { CampusView } from \"../views\";\n\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return (\n      <div>\n        <Header />\n        <CampusView campus={this.props.campus} />\n      </div>\n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = (state) => {\n  return {\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);"]},"metadata":{},"sourceType":"module"}