{"ast":null,"code":"var _jsxFileName = \"/Users/kersv/dev/client-starter-code/src/components/containers/NewStudentContainer.js\";\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        campusId: this.state.campusId,\n        imgURL: this.state.imgURL,\n        campusId: this.state.campusId,\n        gpa: this.state.gpa\n      }; // Add new student in back-end database\n\n      let newStudent = await this.props.addStudent(student); // Update state, and trigger redirect to show the new student\n\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        campusId: null,\n        redirect: true,\n        redirectId: newStudent.id,\n        imgURL: \"\",\n        gpa: \"\",\n        email: \"\"\n      });\n    };\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      campusId: \"\",\n      redirect: false,\n      redirectId: null,\n      imgURL: \"\",\n      email: \"\",\n      gpa: \"\"\n    };\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"sources":["/Users/kersv/dev/client-starter-code/src/components/containers/NewStudentContainer.js"],"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","student","firstname","state","lastname","campusId","imgURL","gpa","newStudent","addStudent","redirect","redirectId","id","email","componentWillUnmount","render","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: \"\", \n      lastname: \"\", \n      campusId: \"\", \n      redirect: false, \n      redirectId: null,\n      imgURL: \"\",\n      email: \"\",\n      gpa:\"\"\n    };\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        campusId: this.state.campusId,\n        imgURL: this.state.imgURL,\n        campusId: this.state.campusId,\n        gpa: this.state.gpa\n    };\n    \n    // Add new student in back-end database\n    let newStudent = await this.props.addStudent(student);\n\n    // Update state, and trigger redirect to show the new student\n    this.setState({\n      firstname: \"\", \n      lastname: \"\", \n      campusId: null, \n      redirect: true, \n      redirectId: newStudent.id,\n      imgURL: \"\",\n      gpa: \"\",\n      email: \"\",\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewStudentView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}      \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        addStudent: (student) => dispatch(addStudentThunk(student)),\n    })\n}\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);"]},"metadata":{},"sourceType":"module"}